outlets = 5;const outletGood = 0;const outletBad  = 1; const outletCube = 2;const outletFace = 3;const outletGone = 4;function crc8(a){	var shift = 0;	var fb = 0;	var data = 0; 	data = (a >> 8) & 0x00FFFFFF; 	/////////////////////////////////////////////////// nibble 1	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	/////////////////////////////////////////////////// nibble 2	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	/////////////////////////////////////////////////// nibble 3	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	/////////////////////////////////////////////////// nibble 4	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	/////////////////////////////////////////////////// nibble 5	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	/////////////////////////////////////////////////// nibble 6	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	fb = (shift & 0x01) ^ (data & 0x01);	data = data >> 1;	shift = shift >> 1;	if (fb==1)	   shift = shift ^ 0x8C;	/////////////////////////////////////////////////// return crc8	return (shift & 0x000000FF);}var previousData = 0;function msg_int(a){	// first check if cube gone 	if (a == 0x00)	{		outlet(outletGone, 1);		// output cube / face nr		outlet(outletFace, (previousData & 0x0000FF00) >> 8); 		outlet(outletCube, (previousData & 0x00FF0000) >> 16);		// cube gone, so any new data will be 		// considered		previousData = 0x00; 	}	else	{		// if there is check if it is different from 		// last time		if (a != previousData)		{			var crcToCheck = (a & 0xFF);			// check if data valid			if (crc8(a) == crcToCheck) 			{				// data valid, store it for next time				previousData = a; 				// output result of CRC				outlet(outletGood, a); 				outlet(outletGone, 0);					// output cube / face nr				outlet(outletFace, (a & 0x0000FF00) >> 8); 				outlet(outletCube, (a & 0x00FF0000) >> 16);			}			else				// output result of CRC				outlet(outletBad, a);				}	}}